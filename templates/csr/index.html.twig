{% extends 'base.html.twig' %}

{% block title %}CSR Generator{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .table-container {
            overflow-x: auto;
        }
        .csr-table {
            min-width: 100%;
            border-collapse: collapse;
        }
        .csr-table th {
            position: sticky;
            top: 0;
            background-color: white;
            z-index: 1;
            text-align: center;
        }
        .csr-table td {
            text-align: center;
            vertical-align: middle;
        }
        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mx-auto p-4">
        <h1 class="text-2xl mb-4">Generate CSR</h1>

        {# Form section #}
        <div class="mb-8">
            {{ form_start(form, {'attr': {'id': 'csr-form'}}) }}
                <div class="grid gap-4">
                    {{ form_row(form.commonName) }}
                    {{ form_row(form.organization) }}
                    {{ form_row(form.organizationalUnit) }}
                    {{ form_row(form.locality) }}
                    {{ form_row(form.state) }}
                    {{ form_row(form.country) }}
                    {{ form_row(form.email) }}
                    {{ form_row(form.keyType) }}
                    {{ form_row(form.keyConfig) }}
                </div>

                <div class="mt-4">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">
                        Generate CSR
                    </button>
                </div>
            {{ form_end(form) }}
        </div>

        {# Stored CSRs Table #}
        <div class="mt-8">
            <h2 class="text-xl mb-4">Stored CSRs</h2>
            <div id="csr-list" class="table-container"></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const csrForm = document.getElementById('csr-form');
            const csrList = document.getElementById('csr-list');
            const CSR_STORAGE_KEY = 'stored_csrs';

            // Define key configurations
            const keyConfigs = {
                'rsa': {
                    '2048': 'RSA 2048 bits (Standard)',
                    '3072': 'RSA 3072 bits (NIST 2030+)',
                    '4096': 'RSA 4096 bits (Extra Secure)'
                },
                'ecc': {
                    'prime256v1': 'ECC prime256v1 (Standard)',
                    'secp384r1': 'ECC secp384r1 (More Secure)',
                    'secp521r1': 'ECC secp521r1 (Extra Secure)'
                }
            };

            // Key type change handler
            const keyTypeSelect = document.querySelector('.key-type-select');
            const keyConfigSelect = document.querySelector('.key-config-select');

            if (keyTypeSelect && keyConfigSelect) {
                keyTypeSelect.addEventListener('change', function() {
                    const selectedType = this.value;
                    const configs = keyConfigs[selectedType];
                    
                    // Clear current options
                    keyConfigSelect.innerHTML = '';
                    
                    // Add new options
                    Object.entries(configs).forEach(([value, label]) => {
                        const option = document.createElement('option');
                        option.value = value;
                        option.textContent = label;
                        keyConfigSelect.appendChild(option);
                    });

                    // Update the label
                    const label = keyConfigSelect.closest('.form-group').querySelector('label');
                    if (label) {
                        label.textContent = selectedType === 'rsa' ? 'Key Size' : 'Curve';
                    }
                });
            }

            function getStoredCSRs() {
                const stored = localStorage.getItem(CSR_STORAGE_KEY);
                return stored ? JSON.parse(stored) : [];
            }

            function saveCSR(csrData) {
                const csrs = getStoredCSRs();
                csrs.push({
                    id: Date.now(),
                    data: csrData,
                    timestamp: new Date().toISOString()
                });
                localStorage.setItem(CSR_STORAGE_KEY, JSON.stringify(csrs));
                updateCSRList();
                console.log('CSR saved:', csrData);
            }

            async function copyToClipboard(text) {
                try {
                    await navigator.clipboard.writeText(text);
                    alert('CSR copied to clipboard!');
                } catch (err) {
                    console.error('Failed to copy:', err);
                    alert('Failed to copy CSR');
                }
            }

            function updateCSRList() {
                const csrs = getStoredCSRs();
                
                if (csrs.length === 0) {
                    csrList.innerHTML = '<p class="text-gray-500 text-center">No CSRs stored yet.</p>';
                    return;
                }

                csrList.innerHTML = `
                    <table class="csr-table">
                        <thead>
                            <tr class="bg-gray-50 border-b">
                                <th class="px-6 py-3">Common Name</th>
                                <th class="px-6 py-3">Organization</th>
                                <th class="px-6 py-3">Org Unit</th>
                                <th class="px-6 py-3">Location</th>
                                <th class="px-6 py-3">State</th>
                                <th class="px-6 py-3">Country</th>
                                <th class="px-6 py-3">Email</th>
                                <th class="px-6 py-3">Key Type</th>
                                <th class="px-6 py-3">Key Config</th>
                                <th class="px-6 py-3">Created</th>
                                <th class="px-6 py-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${csrs.map(csr => `
                                <tr class="border-b hover:bg-gray-50">
                                    <td class="px-6 py-3">${csr.data.metadata.commonName}</td>
                                    <td class="px-6 py-3">${csr.data.metadata.organization}</td>
                                    <td class="px-6 py-3">${csr.data.metadata.organizationalUnit || '-'}</td>
                                    <td class="px-6 py-3">${csr.data.metadata.locality || '-'}</td>
                                    <td class="px-6 py-3">${csr.data.metadata.state || '-'}</td>
                                    <td class="px-6 py-3">${csr.data.metadata.country}</td>
                                    <td class="px-6 py-3">${csr.data.metadata.email || '-'}</td>
                                    <td class="px-6 py-3">${csr.data.metadata.keyType}</td>
                                    <td class="px-6 py-3">${csr.data.metadata.keyConfig}</td>
                                    <td class="px-6 py-3">${new Date(csr.timestamp).toLocaleString()}</td>
                                    <td class="px-6 py-3">
                                        <div class="action-buttons">
                                            <button onclick="copyCSR(${csr.id})" 
                                                    class="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600">
                                                Copy
                                            </button>
                                            <button onclick="deleteCSR(${csr.id})" 
                                                    class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600">
                                                Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            }

            if (csrForm) {
                csrForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(this);
                    fetch(this.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            saveCSR(data);
                        } else {
                            throw new Error(data.error || 'Failed to generate CSR');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert(error.message);
                    });
                });
            }

            // Initialize stored CSRs display
            updateCSRList();

            // Global functions for copy and delete
            window.deleteCSR = function(id) {
                if (confirm('Are you sure you want to delete this CSR?')) {
                    const csrs = getStoredCSRs().filter(csr => csr.id !== id);
                    localStorage.setItem(CSR_STORAGE_KEY, JSON.stringify(csrs));
                    updateCSRList();
                }
            };

            window.copyCSR = function(id) {
                const csr = getStoredCSRs().find(csr => csr.id === id);
                if (csr) {
                    copyToClipboard(csr.data.csr);
                }
            };
        });
    </script>
{% endblock %}